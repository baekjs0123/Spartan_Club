# import sys
# sys.stdin = open('input.txt', 'r')

# 문제 조건에 따르면,
# - 1은 N극 자성체를 나타내며 아래쪽으로 이동합니다.
# - 2는 S극 자성체를 나타내며 위쪽으로 이동합니다.
# 두 자성체가 만나면 교착 상태가 발생하여 움직임이 멈춥니다.
# 여기서는 각 열을 위에서 아래로 확인하여 N극이 등장한 뒤, S극이 등장하면 교착 상태로 카운트합니다.

for test_case in range(1, 11):
    N = int(input())  # 테이블의 크기 N
    # N x N 크기의 테이블을 입력받아 2차원 리스트(행렬)로 저장합니다.
    table = [list(map(int, input().split())) for _ in range(N)]

    cnt = 0  # 교착 상태의 개수를 저장할 변수 초기화

    # 열의 인덱스를 c로 사용하여, 0부터 N-1까지 반복합니다.
    for c in range(N):
        flag = False  # 현재 열에서 N극(1)을 만났는지 여부를 저장하는 플래그 변수
        # 이 플래그는 N극 자성체를 만난 후, 대응하는 S극(2)을 만났을 때 교착 상태가 발생했음을 의미합니다.

        # 각 열의 행(row)을 위쪽(0번 인덱스)부터 아래쪽(N-1번 인덱스)으로 순회합니다.
        for r in range(N):
            if table[r][c] == 1:
                # 현재 위치에 N극 자성체(1)가 있다면,
                # flag를 True로 설정하여 이후에 S극 자성체가 등장할 가능성을 표시합니다.
                flag = True
            elif table[r][c] == 2:
                # 현재 위치에 S극 자성체(2)가 있다면,
                if flag:
                    # flag가 True이면, 이전에 같은 열에서 N극 자성체가 등장한 적이 있다는 뜻입니다.
                    # 즉, N극(1)과 S극(2)이 만난 경우로 교착 상태가 발생합니다.
                    cnt += 1  # 교착 상태 개수를 1 증가시킵니다.
                    flag = False  # 교착 상태를 계산한 후 flag를 초기화합니다.
                    # 한 번 교착 상태가 발생하면, 새로운 N극 자성체를 다시 찾아야 합니다.
                # flag가 False인 경우, 이전에 N극 자성체가 없었으므로 교착 상태가 아니므로 아무 작업도 하지 않습니다.

    # 정답 출력
    print(f"#{test_case} {cnt}")

